{"version":3,"sources":["redux/actions/actionTypes.js","redux/reducers/weather.js","redux/store.js","redux/actions/weather.js","components/LineChart.js","components/Form.js","components/Home.js","routers/AppRouter.js","serviceWorker.js","index.js"],"names":["RECEIVE_WEATHER","REQUEST_WEATHER","defaultState","weather","reducers_weather","state","arguments","length","undefined","action","type","update","isFetching","$set","didInvalidate","lastUpdated","receivedAt","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","fetchWeather","city","country","start","moment","subtract","valueOf","end","encodeCity","encodeURIComponent","concat","encodeCountry","weatherUrl","dispatch","fetch","then","res","json","Date","now","catch","e","console","log","ReactChartkick","addAdapter","Chart","LineChartWrapper","_this$props","this","props","width","height","data","react_default","a","createElement","react_chartkick_esm","Component","Form","value","handleClick","handleChanged","className","placeholder","name","onChange","onClick","Home","_Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","location","handleCityChanged","target","setState","clearInterval","interval","_this$state$location$","split","_this$state$location$2","slicedToArray","setInterval","inherits","createClass","key","_weather$main","main","components_Form","message","temp","LineChart","09/01/2019","08/01/2019","07/01/2019","06/01/2019","05/01/2019","Gauge_default","min","max","label","connect","AppRouter","BrowserRouter","basename","Switch","Route","path","component","exact","Boolean","hostname","match","store","createStore","applyMiddleware","thunk","app","es","routers_AppRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb859550.chunk.js","sourcesContent":["export const RECEIVE_WEATHER = 'RECEIVE_WEATHER'; \nexport const REQUEST_WEATHER = 'REQUEST_WEATHER';","import update from 'immutability-helper'\nimport { REQUEST_WEATHER, RECEIVE_WEATHER } from '../actions/actionTypes'\n\nconst defaultState = {\n  weather:[]\n}\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case REQUEST_WEATHER:\n      return update(state, {\n        isFetching: {$set:true},\n        didInvalidate: {$set:false}\n      })\n    case RECEIVE_WEATHER:  \n      return update(state, {\n        weather: {$set:action.weather},\n        isFetching: {$set:false},\n        didInvalidate: {$set:false},\n        lastUpdated: {$set:action.receivedAt}\n      })\n    default:\n      return state\n  }\n}","\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport weather from './reducers/weather'\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n  //Store cretion\n  const store = createStore(\n    weather,\n    composeEnhancers(applyMiddleware(thunk))\n  )\n  return store\n}","import { REQUEST_WEATHER, RECEIVE_WEATHER } from './actionTypes'\nimport moment from 'moment'\n\nfunction requestWeather() {\n  return {\n    type: REQUEST_WEATHER\n  }\n}\nfunction receiveWeather(weather) {\n  \n  return {\n    type: RECEIVE_WEATHER,\n    weather,\n    receivedAt: Date.now()\n  }\n}\n\nexport const fetchWeather = (city, country) => {\n  const start = moment().subtract(5,'days').valueOf()\n  const end = moment().valueOf()\n\n  const AppID = '14b8fec9d1b5dabe0b20d46050458d51'\n  const encodeCity = encodeURIComponent(`${city}`)\n  const encodeCountry = country?encodeURIComponent(`${country}`):'IL'\n  const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${encodeCity},${encodeCountry}&units=metric&type=hour&start=${start}&end=${end}&APPID=${AppID}`\n  return dispatch => {\n    dispatch(requestWeather())\n    return fetch(weatherUrl)\n    .then(res => res.json())\n    .then(json => dispatch(receiveWeather(json)))\n    .catch(e => console.log(e))\n  }\n}","import React, { Component } from \"react\"\nimport ReactChartkick, { LineChart } from 'react-chartkick'\nimport Chart from 'chart.js'\n\nReactChartkick.addAdapter(Chart)\n\nclass LineChartWrapper extends Component {\n\n  render() {\n    const {width, height, data} =this.props\n    return <LineChart width={width} height={height} data={data} />\n  }\n}\n\nexport default LineChartWrapper;","import React from 'react'\n\nconst Form = (props) => {\n  const { value, handleClick, handleChanged } = props\n  return (\n    <div className=\"form-group mt-3 row justify-content-around\">\n      <input className=\"form-control col-8\" type=\"text\" placeholder=\"Your city and country code\" value={value} name=\"city\" onChange={handleChanged} />\n      <input className=\"form-control col-3 btn btn-primary\" type=\"button\" onClick={handleClick} value=\"Go\" />\n    </div>\n  )\n}\nexport default Form","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchWeather } from '../redux/actions'\nimport LineChart from './LineChart'\nimport Form from './Form'\nimport Gauge from 'react-svg-gauge'\n\nexport class Home extends Component {\n  state = {\n    location: \"\"\n  }\n\n  handleCityChanged = (e) => {\n    const location = e.target.value\n    this.setState({ location })\n  }\n\n  fetchWeather = () => {\n    clearInterval(this.interval)\n    let [city, country] = this.state.location.split(',')\n    this.props.fetchWeather(city, country)\n    this.interval = setInterval(()=>{\n      this.props.fetchWeather(city, country)\n    },15000)\n  }\n\n  render() {\n    const { weather } = this.props\n    const { main = {} } = weather\n    const { location } = this.state\n\n    const data = {\n      \"09/01/2019\": 25,\n      \"08/01/2019\": 27,\n      \"07/01/2019\": 27,\n      \"06/01/2019\": 28,\n      \"05/01/2019\": 29\n    }\n\n    const width = 500, height = 350\n\n    return <div className=\"container col-sm-8 col-12\">\n      <Form value={location} handleClick={this.fetchWeather} handleChanged={this.handleCityChanged} />\n      <div className=\"temperature-box col\">\n        {weather.message && <div className=\"alert alert-danger\">{weather.message}</div>}\n        {main.temp && <div>Current Temperature in <strong>{weather.name}: {main.temp}</strong></div>}\n      </div>\n      <div className=\"row justify-content-around\">\n          <LineChart data={data} width={width} height={height} />\n          <Gauge min=\"-2\" max=\"80\" value={main.temp || ''} width={165} height={165} label=\"Celsius Temperature\" />\n      </div>\n    </div>\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  weather: state.weather\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchWeather: (city, country) => dispatch(fetchWeather(city, country))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","\nimport React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Home from '../components/Home'\n\nconst AppRouter = (props) => (\n  <Router basename=\"/open-weather/\">\n    <div>\n      <Switch>\n        <Route path=\"/\" component={Home} exact={true} />\n      </Switch>\n    </div>\n  </Router >\n);\n\nexport default AppRouter","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport './App.css'\nimport AppRouter from './routers/AppRouter'\nimport * as serviceWorker from './serviceWorker'\n\n\nconst store = configureStore()\nconst app = (\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}